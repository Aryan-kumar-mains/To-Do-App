{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\desktop\\\\MERN Project\\\\todolist\\\\src\\\\components\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport TodoItem from \"./TodoItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [inputText, setInputText] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [toggleBtn, setToggleBtn] = useState(false);\n  const [changedItemId, setChangedItemId] = useState(null); // adding data to Local Storage\n\n  useEffect(() => {\n    localStorage.setItem(\"ToDoItems\", JSON.stringify(items));\n  }, [items]);\n\n  function handleChange(event) {\n    const newValue = event.target.value;\n    setInputText(newValue);\n  }\n\n  function addItem() {\n    if (!inputText) {\n      alert(\"Please fill the Data first\");\n    } else if (toggleBtn && inputText) {\n      const editItem = items.map(item => {\n        if (item.id === changedItemId) {\n          return { ...item,\n            name: inputText\n          };\n        }\n\n        return item;\n      });\n      setItems(editItem);\n    } else {\n      const newItem = {\n        id: \"todo-\" + nanoid(),\n        name: inputText,\n        newName: \"\",\n        completed: false\n      };\n      setItems(prevItems => {\n        return [...prevItems, newItem];\n      });\n    }\n\n    setToggleBtn(false);\n    setInputText(\"\");\n  }\n\n  function deleteItem(id) {\n    setItems(prevItems => {\n      return prevItems.filter((item, index) => {\n        return item.id !== id;\n      });\n    });\n  }\n\n  function toggleTaskCompleted(id) {\n    setItems(prevItems => {\n      return prevItems.map((item, index) => {\n        if (item.id === id) return Object.assign({}, item, {\n          completed: !item.completed\n        });else return item;\n      });\n    });\n  }\n\n  function changeTodoItem(id) {\n    // for changing the text of button\n    setToggleBtn(true); // finding the item for renaming it for transfer that to input section\n\n    const changedItem = items.find(item => {\n      return item.id === id;\n    }); // transferring to input section\n\n    setInputText(changedItem.name); //\n\n    setChangedItemId(id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heading\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"To-Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"text\",\n        value: inputText,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addItem,\n        children: toggleBtn ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\\"Edit\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 23\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\\"Add\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items.map((todoItem, index) => /*#__PURE__*/_jsxDEV(TodoItem, {\n          id: todoItem.id,\n          name: todoItem.name,\n          todoList: todoItem,\n          onChecked: deleteItem,\n          isDone: todoItem.completed,\n          toggleTaskCompleted: toggleTaskCompleted,\n          changeTodoItem: changeTodoItem\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Jw9P8C7QR3k7Oqelpcee2OrGHPo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/desktop/MERN Project/todolist/src/components/App.jsx"],"names":["React","useState","useEffect","nanoid","TodoItem","App","inputText","setInputText","items","setItems","toggleBtn","setToggleBtn","changedItemId","setChangedItemId","localStorage","setItem","JSON","stringify","handleChange","event","newValue","target","value","addItem","alert","editItem","map","item","id","name","newItem","newName","completed","prevItems","deleteItem","filter","index","toggleTaskCompleted","Object","assign","changeTodoItem","changedItem","find","todoItem"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {nanoid} from \"nanoid\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nfunction App() {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [items, setItems] = useState([]);\r\n  const [toggleBtn, setToggleBtn] = useState(false);\r\n  const [changedItemId, setChangedItemId] = useState(null);\r\n\r\n  // adding data to Local Storage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"ToDoItems\", JSON.stringify(items))\r\n  }, [items])\r\n\r\n  function handleChange(event) {\r\n    const newValue = event.target.value;\r\n    setInputText(newValue);\r\n  }\r\n\r\n  function addItem() {\r\n    if(!inputText) {\r\n      alert(\"Please fill the Data first\");\r\n    }\r\n    else if(toggleBtn && inputText) {\r\n      const editItem = items.map((item) => {\r\n        if(item.id === changedItemId) {\r\n          return {...item, name: inputText}\r\n        }\r\n        return item;\r\n      })\r\n      setItems(editItem);\r\n    }\r\n    else {\r\n      const newItem = {id: \"todo-\" + nanoid() ,name:inputText ,newName:\"\", completed: false};\r\n      setItems(prevItems => {\r\n        return [...prevItems, newItem];\r\n      });\r\n    }\r\n    setToggleBtn(false);\r\n    setInputText(\"\");\r\n  }\r\n\r\n  function deleteItem(id) {\r\n    setItems((prevItems) => {\r\n      return prevItems.filter((item, index) => {\r\n        return item.id !== id;\r\n      });\r\n    });\r\n  }\r\n  \r\n  function toggleTaskCompleted(id) {\r\n    setItems((prevItems) => {\r\n      return prevItems.map((item, index) => {\r\n        if(item.id === id)\r\n          return Object.assign({},item, {completed: !item.completed})\r\n        else \r\n          return item\r\n      });\r\n    });\r\n  }\r\n\r\n  function changeTodoItem(id) {\r\n    // for changing the text of button\r\n    setToggleBtn(true);\r\n\r\n    // finding the item for renaming it for transfer that to input section\r\n    const changedItem = items.find((item) => {\r\n      return item.id === id;\r\n    })\r\n    // transferring to input section\r\n    setInputText(changedItem.name) \r\n\r\n    //\r\n    setChangedItemId(id);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"heading\">\r\n        <h1>To-Do List</h1>\r\n      </div>\r\n      <div className=\"form\">\r\n        <input onChange={handleChange} type=\"text\" value={inputText}  autoFocus/>\r\n        <button onClick={addItem}>\r\n        {\r\n          toggleBtn ? <span>\"Edit\"</span> : <span>\"Add\"</span>\r\n        }\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          {items.map((todoItem, index) => (\r\n            <TodoItem\r\n                key = {index}\r\n                id= {todoItem.id}\r\n                name= {todoItem.name}\r\n                todoList = {todoItem}\r\n                onChecked= {deleteItem}\r\n                isDone= {todoItem.completed}\r\n                toggleTaskCompleted= {toggleTaskCompleted}\r\n                changeTodoItem= {changeTodoItem}\r\n               />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}